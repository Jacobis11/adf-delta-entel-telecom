{
	"name": "df_limpiar_datos",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_datos_entel",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_silver_datos_entel",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          FECHA_INICIO as string,",
				"          FECHA_FIN as string,",
				"          NUMERO as string,",
				"          IMEI as string,",
				"          RBS_UTILIZADA as string,",
				"          CELDA as string,",
				"          LATITUD_LONGITUD as string,",
				"          SUBIDOS as string,",
				"          DESCARGADOS as string,",
				"          TOTAL as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 derive(FECHA_INICIO = trim(FECHA_INICIO),",
				"          FECHA_FIN = trim(FECHA_FIN),",
				"          NUMERO = trim(NUMERO),",
				"          IMEI = trim(IMEI),",
				"          RBS_UTILIZADA = trim(RBS_UTILIZADA),",
				"          CELDA = trim(CELDA),",
				"          LATITUD_LONGITUD = trim(LATITUD_LONGITUD),",
				"          SUBIDOS = trim(SUBIDOS),",
				"          DESCARGADOS = trim(DESCARGADOS),",
				"          TOTAL = trim(TOTAL)) ~> derivedColumn1",
				"derivedColumn1 filter(!isNull(FECHA_INICIO) && FECHA_INICIO != '' && FECHA_INICIO != '-' &&\r",
				"!isNull(FECHA_FIN)    && FECHA_FIN    != '' && FECHA_FIN    != '-' &&\r",
				"!isNull(NUMERO)       && NUMERO       != '' && NUMERO       != '-' &&\r",
				"!isNull(TOTAL)        && TOTAL        != '' && TOTAL        != '-'\r",
				") ~> filter1",
				"derivedColumn2 cast(output(",
				"          CELDA as integer,",
				"          SUBIDOS as long,",
				"          DESCARGADOS as long,",
				"          TOTAL as long",
				"     ),",
				"     errors: true) ~> cast1",
				"filter1 derive(FECHA_INICIO_TS = toTimestamp(\r",
				"  concat(\r",
				"    /* year */ split(split(trim(FECHA_INICIO),' ')[0],'/')[2], '-',\r",
				"    /* month con 0 a la izquierda */\r",
				"    iif(length(split(split(trim(FECHA_INICIO),' ')[0],'/')[0])==1,\r",
				"        concat('0', split(split(trim(FECHA_INICIO),' ')[0],'/')[0]),\r",
				"        split(split(trim(FECHA_INICIO),' ')[0],'/')[0]\r",
				"    ), '-',\r",
				"    /* day con 0 a la izquierda */\r",
				"    iif(length(split(split(trim(FECHA_INICIO),' ')[0],'/')[1])==1,\r",
				"        concat('0', split(split(trim(FECHA_INICIO),' ')[0],'/')[1]),\r",
				"        split(split(trim(FECHA_INICIO),' ')[0],'/')[1]\r",
				"    ), ' ',\r",
				"    /* hour con 0 a la izquierda */\r",
				"    iif(length(split(split(trim(FECHA_INICIO),' ')[1],':')[0])==1,\r",
				"        concat('0', split(split(trim(FECHA_INICIO),' ')[1],':')[0]),\r",
				"        split(split(trim(FECHA_INICIO),' ')[1],':')[0]\r",
				"    ), ':',\r",
				"    /* minute con 0 a la izquierda */\r",
				"    iif(length(split(split(trim(FECHA_INICIO),' ')[1],':')[1])==1,\r",
				"        concat('0', split(split(trim(FECHA_INICIO),' ')[1],':')[1]),\r",
				"        split(split(trim(FECHA_INICIO),' ')[1],':')[1]\r",
				"    )\r",
				"  ),\r",
				"  'yyyy-MM-dd HH:mm'\r",
				")\r",
				",",
				"          FECHA_FIN_TS = toTimestamp(\r",
				"  concat(\r",
				"    split(split(trim(FECHA_FIN),' ')[0],'/')[2], '-',\r",
				"    iif(length(split(split(trim(FECHA_FIN),' ')[0],'/')[0])==1,\r",
				"        concat('0', split(split(trim(FECHA_FIN),' ')[0],'/')[0]),\r",
				"        split(split(trim(FECHA_FIN),' ')[0],'/')[0]\r",
				"    ), '-',\r",
				"    iif(length(split(split(trim(FECHA_FIN),' ')[0],'/')[1])==1,\r",
				"        concat('0', split(split(trim(FECHA_FIN),' ')[0],'/')[1]),\r",
				"        split(split(trim(FECHA_FIN),' ')[0],'/')[1]\r",
				"    ), ' ',\r",
				"    iif(length(split(split(trim(FECHA_FIN),' ')[1],':')[0])==1,\r",
				"        concat('0', split(split(trim(FECHA_FIN),' ')[1],':')[0]),\r",
				"        split(split(trim(FECHA_FIN),' ')[1],':')[0]\r",
				"    ), ':',\r",
				"    iif(length(split(split(trim(FECHA_FIN),' ')[1],':')[1])==1,\r",
				"        concat('0', split(split(trim(FECHA_FIN),' ')[1],':')[1]),\r",
				"        split(split(trim(FECHA_FIN),' ')[1],':')[1]\r",
				"    )\r",
				"  ),\r",
				"  'yyyy-MM-dd HH:mm'\r",
				")\r",
				") ~> derivedColumn2",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FECHA_INICIO as timestamp,",
				"          FECHA_FIN as timestamp,",
				"          NUMERO as string,",
				"          IMEI as string,",
				"          RBS_UTILIZADA as string,",
				"          CELDA as integer,",
				"          LATITUD_LONGITUD as string,",
				"          SUBIDOS as long,",
				"          DESCARGADOS as long,",
				"          TOTAL as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FECHA_INICIO = FECHA_INICIO_TS,",
				"          FECHA_FIN = FECHA_FIN_TS,",
				"          NUMERO,",
				"          IMEI,",
				"          RBS_UTILIZADA,",
				"          CELDA,",
				"          LATITUD_LONGITUD,",
				"          SUBIDOS,",
				"          DESCARGADOS,",
				"          TOTAL",
				"     )) ~> sink1"
			]
		}
	}
}