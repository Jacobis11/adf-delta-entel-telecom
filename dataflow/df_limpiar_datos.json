{
	"name": "df_limpiar_datos",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_llamadas_entel",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_silver_llamadas_entel",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SERVICIO as string,",
				"          REGISTRO as string,",
				"          NUMERO_A as string,",
				"          IMEI_A as string,",
				"          RBS_UTILIZADA_A as string,",
				"          CELDA_A as string,",
				"          LATITUD_LONGITUD_A as string,",
				"          NUMERO_B as string,",
				"          IMEI_B as string,",
				"          RBS_UTILIZADA_B as string,",
				"          CELDA_B as string,",
				"          LATITUD_LONGITUD_B as string,",
				"          FECHA as string,",
				"          DURACION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 derive(SERVICIO = trim(SERVICIO),",
				"          REGISTRO = trim(REGISTRO),",
				"          NUMERO_A = trim(NUMERO_A),",
				"          IMEI_A = trim(IMEI_A),",
				"          RBS_UTILIZADA_A = trim(RBS_UTILIZADA_A),",
				"          CELDA_A = trim(CELDA_A),",
				"          LATITUD_LONGITUD_A = trim(LATITUD_LONGITUD_A),",
				"          NUMERO_B = trim(NUMERO_B),",
				"          IMEI_B = trim(IMEI_B),",
				"          RBS_UTILIZADA_B = trim(RBS_UTILIZADA_B),",
				"          CELDA_B = trim(CELDA_B),",
				"          LATITUD_LONGITUD_B = trim(LATITUD_LONGITUD_B),",
				"          FECHA = trim(FECHA),",
				"          DURACION = trim(DURACION)) ~> derivedColumn1",
				"derivedColumn1 filter(!isNull(NUMERO_A) && NUMERO_A != '-' &&\r",
				"!isNull(NUMERO_B) && NUMERO_B != '-' &&\r",
				"!isNull(FECHA) && FECHA != '-'\r",
				") ~> filter1",
				"derivedColumn2 cast(output(",
				"          FECHA as date 'dd-MM-yyyy HH:mm:ss',",
				"          DURACION_SEG as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"filter1 derive(FECHA = iif(isNull(FECHA) || FECHA == '' || FECHA == '-', '01-01-1900 00:00:00', FECHA)\r",
				",",
				"          DURACION = iif(isNull(DURACION) || DURACION == '' || DURACION == '-', '00:00:00', DURACION)\r",
				",",
				"          DURACION_SEG = iif(\r",
				"  isNull(DURACION) || trim(DURACION) == '' || DURACION == '-',\r",
				"  0,\r",
				"  iif(\r",
				"    size(split(DURACION, ':')) == 3,\r",
				"      toInteger(split(DURACION, ':')[0]) * 3600 +\r",
				"      toInteger(split(DURACION, ':')[1]) * 60 +\r",
				"      toInteger(split(DURACION, ':')[2]),\r",
				"    iif(\r",
				"      size(split(DURACION, ':')) == 2,\r",
				"        toInteger(split(DURACION, ':')[0]) * 60 +\r",
				"        toInteger(split(DURACION, ':')[1]),\r",
				"      toInteger(split(DURACION, ':')[0])\r",
				"    )\r",
				"  )\r",
				")\r",
				") ~> derivedColumn2",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SERVICIO as string,",
				"          REGISTRO as string,",
				"          NUMERO_A as string,",
				"          IMEI_A as string,",
				"          RBS_UTILIZADA_A as string,",
				"          CELDA_A as string,",
				"          LATITUD_LONGITUD_A as string,",
				"          NUMERO_B as string,",
				"          IMEI_B as string,",
				"          RBS_UTILIZADA_B as string,",
				"          CELDA_B as string,",
				"          LATITUD_LONGITUD_B as string,",
				"          FECHA as date,",
				"          DURACION as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SERVICIO,",
				"          REGISTRO,",
				"          NUMERO_A,",
				"          IMEI_A,",
				"          RBS_UTILIZADA_A,",
				"          CELDA_A,",
				"          LATITUD_LONGITUD_A,",
				"          NUMERO_B,",
				"          IMEI_B,",
				"          RBS_UTILIZADA_B,",
				"          CELDA_B,",
				"          LATITUD_LONGITUD_B,",
				"          FECHA,",
				"          DURACION = DURACION_SEG",
				"     )) ~> sink1"
			]
		}
	}
}